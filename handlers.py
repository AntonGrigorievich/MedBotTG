from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext

from config import ADMINS_ID
from app import bot, dp, db
from states import *
from keyboards.reply import *
from keyboards.inline import *
from servises import *


"""–ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
async def admin_startup(dp):
    for id in ADMINS_ID:
        await bot.send_message(chat_id=id, text='–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

@dp.message_handler(Command('user_questions'))
async def get_user_questions(message: Message):
    if message.from_id not in ADMINS_ID:
        await message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
    else:
        questions_data = db.get_questions()
        if questions_data:
            kb = create_support_keyboard(questions_data)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç', reply_markup=kb)
            await SupportAnswer.first()
        else:
            await message.answer('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.')
        
@dp.callback_query_handler(support_admin_callback.filter(), state=SupportAnswer.question_action_select)
async def admin_action_select(call: CallbackData, state: FSMContext):
    await call.answer()
    await state.update_data(
        question_id = call.data.split(':')[1],
        user_id = call.data.split(':')[2],
    )
    await call.message.edit_text('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º?')
    await call.message.edit_reply_markup(QuestionActionSelectKeyboard)
    await SupportAnswer.next()

@dp.callback_query_handler(question_action_callback.filter(action='answer'), state=SupportAnswer.action_execute)
async def answer_user_question(call: CallbackData, state: FSMContext):
    await call.answer()
    await call.message.delete_reply_markup()
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.')
    await SupportAnswer.next()

@dp.message_handler(state=SupportAnswer.answer_get)
async def get_admin_answer(message: Message, state: FSMContext):
    await message.answer(f"""–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n
{message.text}\n
–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?""", reply_markup=QuestionConfirmKeyboard)
    await state.update_data(answer_text = message.text)
    await SupportAnswer.next()

@dp.callback_query_handler(question_confirm_callback.filter(confirmation='False'), state=SupportAnswer.answer_confirm)
async def cancel_answer(call: CallbackData, state: FSMContext):
    await call.answer('–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    await call.message.delete_reply_markup()
    text = call.message.text
    await call.message.edit_text(f'{text}\n*–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ*')
    await state.finish()

@dp.callback_query_handler(question_confirm_callback.filter(confirmation='True'), state=SupportAnswer.answer_confirm)
async def cancel_answer(call: CallbackData, state: FSMContext):
    await call.answer('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç')
    await call.message.delete_reply_markup()
    async with state.proxy() as data:
        data = data.as_dict()
        answer_text = f"–û—Ç–≤–µ—Ç –Ω–∞—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{data['answer_text']}"
        await bot.send_message(chat_id=data['user_id'], text=answer_text)
        db.delete_question(data['question_id'])
    text = call.message.text
    await call.message.edit_text(f'{text}\n*–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*')
    await state.finish()

@dp.callback_query_handler(question_action_callback.filter(action='delete'), state=SupportAnswer.action_execute)
async def delete_user_question(call: CallbackData, state: FSMContext):
    await call.answer('–£–¥–∞–ª–µ–Ω–∏–µ')
    async with state.proxy() as data:
        data = data.as_dict()
        db.delete_question(data['question_id'])
    await call.message.delete_reply_markup()
    await call.message.edit_text('–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    await state.finish()


@dp.message_handler(Command('start'))
async def show_menu(messge: Message):
    if messge.from_id not in ADMINS_ID:
        await messge.answer('–ö–∞–∫ –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=MenuKeyboard)
    else:
        await messge.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', reply_markup=AdminMenuKeyboard)

@dp.message_handler(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é')
async def show_user_menu(message: Message):
    await message.answer('–í–∫–ª—é—á–∞–µ–º –º–µ–Ω—é', reply_markup=MenuKeyboard)


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é """
@dp.message_handler(text='üìç –ü–æ–º–æ—â—å', state='*')
async def bot_help(message: Message):
    await message.answer("""
–î–∞–Ω–Ω—ã–π –æ–±–ª–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º:\n
    ‚Ä¢ üìã–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É - –¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å (–≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞).\n
    ‚Ä¢ ‚ù§–°–∏–º–ø—Ç–æ–º—ã - –î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.\n
    ‚Ä¢ ‚ùî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å - –î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–ø—Ä–æ—Å–∏—Ç—å —É –±–æ—Ç–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å (–±—ã—Å—Ç—Ä–æ –Ω–æ –Ω–µ—Ç–æ—á–Ω–æ).\n
    ‚Ä¢ i –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–∞—Å–∞—é—â—É—é—Å—è –û—Ä—Å–∫–æ–π –±–æ–ª—å–Ω–∏—Ü—ã, –µ–µ —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n
    ‚Ä¢ ‚òé –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - –î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É (–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–æ –≤–µ—Ä–Ω–æ).\n
    """)

@dp.message_handler(text='üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É', state='*')
async def make_appointment(message: Message):
    await message.answer("""
–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –≤—Ä–∞—á—É –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏, –ª–∏—á–Ω–æ –∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n
–ì–æ—Å—É—Å–ª—É–≥–∏ - https://gosuslugi.ru/\n
–¢–µ–ª–µ—Ñ–æ–Ω - 8 (495) 000-00-00\n
    """
    )

@dp.message_handler(text='‚òé –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
async def start_support_state(message: Message):
    await message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏", reply_markup=None)
    await SupportQuestion.first()

@dp.message_handler(state=SupportQuestion.support_question)
async def confirm_support_question(message: Message, state: FSMContext):
    await state.update_data(
        user_id = message.from_id,
        question = message.text
    )
    await message.answer(
        text=f"""–í–∞—à –≤–æ–ø—Ä–æ—Å: {message.text}\n
–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏?""",
        reply_markup=QuestionConfirmKeyboard)
    await SupportQuestion.next()


@dp.callback_query_handler(question_confirm_callback.filter(confirmation='True'), state=SupportQuestion.support_question_confirm)
async def accept_question(call: CallbackData, state: FSMContext):
    await call.answer('–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É')
    async with state.proxy() as data:
        user_id = data.as_dict()['user_id']
        question = data.as_dict()['question']
        db.add_question(user_id, question)
    await state.finish()
    await call.message.delete_reply_markup()
    await call.message.edit_text('–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É')

@dp.callback_query_handler(question_confirm_callback.filter(confirmation='False'), state=SupportQuestion.support_question_confirm)
async def accept_question(call: CallbackData, state: FSMContext):
    await call.answer('–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞')
    await state.finish()
    await call.message.delete_reply_markup()
    await call.message.edit_text('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    

""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç–µ—Å—Ç–∞ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ """
@dp.message_handler(text='‚ù§–°–∏–º–ø—Ç–æ–º—ã')
async def start_self_diagnosis(message: Message):
    await message.answer("""
–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º—ã –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º —á—Ç–æ —Å –≤–∞–º–∏ —Å–ª—É—á–∏–ª–æ—Å—å.\n
1/5) –ö–∞–∫–∞—è —É –≤–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?
    """, reply_markup=TempKeyboard)
    await SelfDiagnosis.first()

@dp.callback_query_handler(symptom_callback.filter(symp_name='temp'), state=SelfDiagnosis.nose_question)
async def diagnosis_question_nose(call: CallbackData, callback_data: dict, state: FSMContext):
    await call.answer()
    await state.update_data(
        temp_status = callback_data['symp_status']
    )
    await call.message.edit_text('2/5) –í–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ—Å–æ–º?')
    await call.message.edit_reply_markup(NoseKeyboard)
    await SelfDiagnosis.next()

@dp.callback_query_handler(symptom_callback.filter(symp_name='nose'), state=SelfDiagnosis.headache_question)
async def diagnosis_question_head(call: CallbackData, callback_data: dict, state: FSMContext):
    await call.answer()
    await state.update_data(
        nose_status = callback_data['symp_status']
    )
    await call.message.edit_text('3/5) –£ –≤–∞—Å –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞?')
    await call.message.edit_reply_markup(HeadKeyboard)
    await SelfDiagnosis.next()

@dp.callback_query_handler(symptom_callback.filter(symp_name='head'), state=SelfDiagnosis.cough_question)
async def diagnosis_question_cough(call: CallbackData, callback_data: dict, state: FSMContext):
    await call.answer()
    await state.update_data(
        head_status = callback_data['symp_status']
    )
    await call.message.edit_text('4/5) –í–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∫–∞—à–µ–ª—å?')
    await call.message.edit_reply_markup(CoughKeyboard)
    await SelfDiagnosis.next()

@dp.callback_query_handler(symptom_callback.filter(symp_name='cough'), state=SelfDiagnosis.scrappiness_question)
async def diagnosis_question_body(call: CallbackData, callback_data: dict, state: FSMContext):
    await call.answer()
    await state.update_data(
        cough_status = callback_data['symp_status']
    )
    await call.message.edit_text('5/5) –í—ã –æ—â—É—â–∞–µ—Ç–µ –ª–æ–º–æ—Ç—É?')
    await call.message.edit_reply_markup(BodyKeyboard)
    await SelfDiagnosis.next()

@dp.callback_query_handler(symptom_callback.filter(symp_name='body'), state=SelfDiagnosis.final_state)
async def diagnosis_final(call: CallbackData, callback_data: dict, state: FSMContext):
    await call.answer()
    await state.update_data(
        body_status = callback_data['symp_status']
    )
    res = ''

    async with state.proxy() as data:
        res = detect_diagnosis(data.values())

    await state.reset_state()
    await call.message.delete_reply_markup()
    await call.message.edit_text(res)

@dp.callback_query_handler(text='cancel', state='*')
async def cancel_test(call: CallbackQuery, state: FSMContext):
    await call.answer('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω')
    await state.reset_state()
    await call.message.delete_reply_markup()
    await call.message.edit_text('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω')